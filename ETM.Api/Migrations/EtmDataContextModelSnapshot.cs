// <auto-generated />
using System;
using ETM.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETM.Api.Migrations
{
    [DbContext(typeof(EtmDataContext))]
    partial class EtmDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("ETM.Api.AppUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ETM.Api.Attendance", b =>
                {
                    b.Property<int>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("ClockInTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("ClockOutTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AttendanceID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("ETM.Api.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ETM.Api.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppUserID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ETM.Api.EmployeeHierarchy", b =>
                {
                    b.Property<int>("RelationshipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubordinateEmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuperiorEmployeeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RelationshipID");

                    b.HasIndex("SubordinateEmployeeID");

                    b.HasIndex("SuperiorEmployeeID");

                    b.ToTable("EmployeeHierarchies");
                });

            modelBuilder.Entity("ETM.Api.EmployeeProject", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("ETM.Api.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LeaveRequestID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("ETM.Api.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectName")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ETM.Api.TimeSheet", b =>
                {
                    b.Property<int>("TimeSheetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalHoursWorked")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WeekEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeSheetID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("ETM.Api.Attendance", b =>
                {
                    b.HasOne("ETM.Api.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ETM.Api.Employee", b =>
                {
                    b.HasOne("ETM.Api.AppUser", "AppUser")
                        .WithMany("Employees")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETM.Api.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETM.Api.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID");

                    b.Navigation("AppUser");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ETM.Api.EmployeeHierarchy", b =>
                {
                    b.HasOne("ETM.Api.Employee", "SubordinateEmployee")
                        .WithMany("SuperiorRelations")
                        .HasForeignKey("SubordinateEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETM.Api.Employee", "SuperiorEmployee")
                        .WithMany("SubordinateRelations")
                        .HasForeignKey("SuperiorEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubordinateEmployee");

                    b.Navigation("SuperiorEmployee");
                });

            modelBuilder.Entity("ETM.Api.EmployeeProject", b =>
                {
                    b.HasOne("ETM.Api.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETM.Api.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ETM.Api.LeaveRequest", b =>
                {
                    b.HasOne("ETM.Api.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ETM.Api.TimeSheet", b =>
                {
                    b.HasOne("ETM.Api.Employee", "Employee")
                        .WithMany("TimeSheets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ETM.Api.AppUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ETM.Api.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ETM.Api.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("LeaveRequests");

                    b.Navigation("SubordinateRelations");

                    b.Navigation("SuperiorRelations");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("ETM.Api.Project", b =>
                {
                    b.Navigation("EmployeeProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
